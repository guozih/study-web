//================================================== 解构赋值 ==================================================
  /* 
    解构赋值主要是针对于数组个对象的，真实项目中，一般常用于把服务器获取的JSON数据进行快速解构，赋值给对应的变量，帮助我们快速拿到对应的结果。
  */
  //==================== 数组 ====================
    let arr = [10,20,30,40];
    let arr1 = [10];
    //a,b,c,d 依次对应4个值。
     let [a,b,c,d] = arr;   
    //只需要拿到第一个值和最后一个值，赋值给a和b	 
    let [a,,,b] = arr
    //只需要拿到第一个值，赋值给a 	  
    let [a] = arr;
    //用扩展运算符把最后几个值赋值给吧，并且是个数组		 
    let [a,...b]	
    //把数组反过来，达到取到最后一个值		 
    let [a] = arr.reverse()
    //b赋值为默认值，没有默认值，为undefined 
    let [a,b=20] = arr
    //数值互换（[b,a] = [10,20]，只不过用了变量	代替） 	 
    let a = 10,b = 20;[b,a] = [a,b] 

  //==================== 对象 ====================
    let obj = { id:1,name:'狗蛋' }
    //变量的结果为：id = 1,name="狗蛋",sex=20
    let { id,name,sex = 20 } = obj   //依次赋值，obj中没有sex属性，因此sex值为undefined，也可以设置默认值
    let sex = 10;
    let obj = { id:1,sex:20 };
    //这样会报错，因为let不允许第二次声明
    let { sex } = obj; 
    //起个别名，叫做sex1，但是值是obj对象里的  sex属性，现在sex1的值是obj.sex的值    		 
    let { sex:sex1 }  = obj;
    /* 
      对象和数组不一样，只能通过属性名相同的赋值，数组是依次对应复制。对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者
     */	
    let {foo:foo,bar:bar} = {foo:'aaa',bar:'bbb'}
    // 等同于
    let {foo,bar} = {foo:'aaa',bar:'bbb'} 
    /* 
      foreach里面第一个回调函数的参数直接把 item 解构了，item可有可无，后面那个是在保证每一项 item 为空的时候（null不行），默认是是 {} 可有可无
      注意：保证每个 item 必须是对象
    */
    let obj = [{ id:1,sex:10 },{ id:2,sex:20 }];
    obj.forEach(({ id,sex } = item = {})=>{
      console.log( id,sex );
    }) 

    //==================== ...运算符 ====================
      /* 
        （只能放到参数的最后一位，否则报错）扩展运算符  和 结构赋值 结合起来，用于生成新的数组
      */
      /* 
        三个作用 ：一：扩展运算符  let [...arr] = [1,2,3,4]; 
                  二：剩余运算符  函数的形参赋值上
                  三：展开运算符  展开数组或者对象中的每一项   console.log(...[1,2,3])

      */   	
      let fn = function( n,...m ){
        // n=> 1 m=>[2,3,4]
        console.log(n,m);   
      }
      fn(1,2,3,4);
    //==================== Set和Map ====================
      /* 
        Set是一种类似于数组的数据结构，但是每一项都是唯一的，没有重复值
      */
      let arr = [1,2,3,2,3];
      //数组去重：返回结果[1,2,3]
      new Set(arr);
      //（但是是Set对象的实例，因此把它变为数组）	以下两种方法
      let arr = [ ...new Set([1,2,3,1]) ]
      let arr = Array.from( new Set([1,2,3,1]) )

      /* 
        Map是一种类似于数组的数据结构，但是每一项都是唯一的，没有重复值
      */
      let n = { x:10 }
      let obj = new Map();
      // 设置属性
      obj.set(n,10);
      // 获取属性（不能像普通对象那样去设置属性），返回结果为 10 			
      obj.get(n)	


