//================================================== 案例一 ==================================================
/* 
  42.toFixed(2);
  这样会报错，因为JS里 42.0 可以写成 42. 因此 42.toFixed(2)，引擎会认为是 要写成42.0，因此会报错
*/ 
(42).toFixed(2);  /* 上括号可以 */
42.0.toFixed(2);
42..toFixed(2);   /* 这两种都可以，前边会认为 42.0 再去调用 toFixed(2) */


//================================================= 案例二 ==================================================
~7  /* => -8 */
~(-19-1) /* => 19 */
/*  ~加一取反 -(7+1) 
    缘由：由于计算机是以 补码 显示的（符号位：1是负数 0是正数）
          正数的源码、反码、补码都是一样的
          负数的反码是 符号位不变，其余的取反，补码是反码加1
    ~是得到计算机存储时的 32位二进制数（补码），再取反（包括符号位）【就是把每个位置0和1互换】，得到的数看谁的补码与之对应
    就是 这个数
    ~~就是补码取反，再取反，还是原来的值（但是只能表示32位整数，不能表示小数点，因此也可以获取整数的随机数）
*/
~~(Math.random()*7) /* 由于运算符的优先级，必须加上(),相当于Math.floor(Math.random()*7) */ 
var str = 'hello';
if(~str.indexOf('s')){}  
'#'+(~~(Math.random()*(1<<24))).toString(16) //获取一个16进制随机颜色
/* 
  因为if(-1){} 里面的代码也可以执行【【0,-0,+0】,NaN,undefined,null,false,''】
  其余都是true【包括new Boolean(false)】。因此不能这么写，也可以 if(str.indexOf('s')!==-1){}
  indexOf找不到返回 -1 ,~-1的结果是 0为false，其余的全是true 
*/